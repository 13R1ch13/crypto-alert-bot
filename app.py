import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums.parse_mode import ParseMode
from config import TELEGRAM_TOKEN, POLL_INTERVAL
from db import init_db, get_active_alerts, deactivate_alert
from handlers import router
from binance import BinanceClient, WINDOW_TO_INTERVAL

async def poller(bot: Bot):
    client = BinanceClient()
    try:
        while True:
            alerts = await get_active_alerts()
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É –∏ —Ç–∏–ø—É –æ–∫–Ω–∞, —á—Ç–æ–±—ã –º–µ–Ω—å—à–µ –¥–µ—Ä–≥–∞—Ç—å API
            # –î–ª—è price –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É 1 —Ä–∞–∑ –Ω–∞ —Å–∏–º–≤–æ–ª, –¥–ª—è pct –ø–æ–ª—É—á–∞–µ–º 2 —Å–≤–µ—á–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª.
            prices_cache = {}
            klines_cache = {}

            for a in alerts:
                symbol = a['symbol'].upper()
                if a['type'] == 'price':
                    if symbol not in prices_cache:
                        try:
                            prices_cache[symbol] = await client.get_price(symbol)
                        except Exception as e:
                            # –õ–æ–≥ –æ—à–∏–±–æ–∫ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
                            continue
                    price = prices_cache[symbol]
                    op = a['op']
                    target = float(a['target'])
                    triggered = (price >= target) if op == '>=' else (price <= target)
                    if triggered:
                        text = f"üîî #{a['id']} {symbol}: —Ç–µ–∫—É—â–∞—è {price:.8f} {op} {target}"
                        await bot.send_message(a['chat_id'], text)
                        await deactivate_alert(a['id'])

                elif a['type'] == 'pct':
                    window = a['window_str']
                    interval = WINDOW_TO_INTERVAL.get(window, (None, None))[0]
                    if interval is None:
                        continue
                    key = (symbol, interval)
                    if key not in klines_cache:
                        try:
                            # –ë–µ—Ä—ë–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–∏ –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                            kl = await client.get_klines(symbol, interval, limit=2)
                            klines_cache[key] = kl
                        except Exception as e:
                            continue
                    kl = klines_cache[key]
                    if len(kl) < 2:
                        continue
                    prev_close = float(kl[-2][4])  # close –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏
                    last_close = float(kl[-1][4])  # close –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
                    if prev_close == 0:
                        continue
                    change_pct = (last_close - prev_close) / prev_close * 100.0
                    threshold = float(a['target'])
                    if abs(change_pct) >= threshold:
                        sign = "‚ñ≤" if change_pct >= 0 else "‚ñº"
                        text = (
                            f"üîî #{a['id']} {symbol} {sign} {change_pct:.2f}% –∑–∞ {window}\n"
                            f"–¶–µ–Ω–∞: {last_close:.8f} (–±—ã–ª–∞ {prev_close:.8f})"
                        )
                        await bot.send_message(a['chat_id'], text)
                        await deactivate_alert(a['id'])

            await asyncio.sleep(POLL_INTERVAL)
    finally:
        await client.close()

async def main():
    if not TELEGRAM_TOKEN:
        raise SystemExit("TELEGRAM_TOKEN –ø—É—Å—Ç. –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env")
    await init_db()

    bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    dp.include_router(router)

    # –°—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–ª–ª–µ—Ä
    asyncio.create_task(poller(bot))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
