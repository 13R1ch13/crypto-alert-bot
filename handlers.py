from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from db import add_price_alert, add_pct_alert, list_alerts, delete_alert
from binance import parse_window
from binance import BinanceClient
import re
import asyncio

router = Router()

SYMBOL_RE = re.compile(r'^[A-Z0-9]{5,15}$')

HELP_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –∫—Ä–∏–ø—Ç–æ‚Äë–∞–ª–µ—Ä—Ç –±–æ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    "/price <SYMBOL> ‚Äî —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: /price BTCUSDT)\n"
    "/set <SYMBOL> <OP> <PRICE> ‚Äî —Ü–µ–Ω–æ–≤–æ–π –∞–ª–µ—Ä—Ç (–ø—Ä–∏–º–µ—Ä: /set BTCUSDT >= 65000)\n"
    "/set_pct <SYMBOL> <PERCENT> <WINDOW> ‚Äî –∞–ª–µ—Ä—Ç –Ω–∞ % –∑–∞ –æ–∫–Ω–æ (–ø—Ä–∏–º–µ—Ä: /set_pct BTCUSDT 5 1h)\n"
    "/list ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤\n"
    "/delete <ID> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç"
)

@router.message(Command("start"))
@router.message(Command("help"))
async def cmd_start(message: Message):
    await message.answer(HELP_TEXT)

@router.message(Command("price"))
async def cmd_price(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /price <SYMBOL> (–Ω–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT)")
        return
    symbol = parts[1].upper()
    if not SYMBOL_RE.match(symbol):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª. –ü—Ä–∏–º–µ—Ä: BTCUSDT")
        return
    client = BinanceClient()
    try:
        price = await client.get_price(symbol)
        if price is None:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã")
        else:
            await message.answer(f"{symbol}: {price:.8f}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
    finally:
        await client.close()

@router.message(Command("set"))
async def cmd_set(message: Message):
    # /set BTCUSDT >= 65000
    parts = message.text.strip().split()
    if len(parts) != 4:
        await message.answer("–§–æ—Ä–º–∞—Ç: /set <SYMBOL> <OP> <PRICE>\n–ü—Ä–∏–º–µ—Ä: /set BTCUSDT >= 65000")
        return
    symbol, op, price = parts[1].upper(), parts[2], parts[3]
    if not SYMBOL_RE.match(symbol):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª. –ü—Ä–∏–º–µ—Ä: BTCUSDT")
        return
    if op not in (">=", "<="):
        await message.answer("OP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '>=' –∏–ª–∏ '<='")
        return
    try:
        target = float(price.replace(',', '.'))
    except ValueError:
        await message.answer("PRICE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    alert_id = await add_price_alert(message.from_user.id, message.chat.id, symbol, op, target)
    await message.answer(f"‚úÖ –ê–ª–µ—Ä—Ç #{alert_id} —Å–æ–∑–¥–∞–Ω: {symbol} {op} {target}")

@router.message(Command("set_pct"))
async def cmd_set_pct(message: Message):
    # /set_pct BTCUSDT 5 1h
    parts = message.text.strip().split()
    if len(parts) != 4:
        await message.answer("–§–æ—Ä–º–∞—Ç: /set_pct <SYMBOL> <PERCENT> <WINDOW>\n–ü—Ä–∏–º–µ—Ä: /set_pct BTCUSDT 5 1h")
        return
    symbol, pct_str, window = parts[1].upper(), parts[2], parts[3]
    if not SYMBOL_RE.match(symbol):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª. –ü—Ä–∏–º–µ—Ä: BTCUSDT")
        return
    try:
        percent = float(pct_str.replace(',', '.'))
    except ValueError:
        await message.answer("PERCENT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    if percent <= 0:
        await message.answer("PERCENT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        return
    try:
        interval, seconds = parse_window(window)
    except ValueError as e:
        await message.answer(str(e))
        return

    alert_id = await add_pct_alert(message.from_user.id, message.chat.id, symbol, percent, window, seconds)
    await message.answer(f"‚úÖ –ê–ª–µ—Ä—Ç #{alert_id} —Å–æ–∑–¥–∞–Ω: {symbol} ¬±{percent}% –∑–∞ {window}")

@router.message(Command("list"))
async def cmd_list(message: Message):
    rows = await list_alerts(message.from_user.id)
    if not rows:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤.")
        return
    lines = []
    for r in rows:
        if r['type'] == 'price':
            lines.append(f"#{r['id']}: {r['symbol']} {r['op']} {r['target']}  | active={r['active']}")
        else:
            lines.append(f"#{r['id']}: {r['symbol']} ¬±{r['target']}% / {r['window_str']} | active={r['active']}")
    await message.answer("\n".join(lines))

@router.message(Command("delete"))
async def cmd_delete(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /delete <ID>")
        return
    try:
        alert_id = int(parts[1])
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    ok = await delete_alert(alert_id, message.from_user.id)
    if ok:
        await message.answer(f"üóëÔ∏è –ê–ª–µ—Ä—Ç #{alert_id} —É–¥–∞–ª—ë–Ω")
    else:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω –∞–ª–µ—Ä—Ç —Å —Ç–∞–∫–∏–º ID (–∏–ª–∏ –æ–Ω –Ω–µ –≤–∞—à).")
